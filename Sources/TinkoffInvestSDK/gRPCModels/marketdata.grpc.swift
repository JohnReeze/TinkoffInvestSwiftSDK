//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: marketdata.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///Сервис получения биржевой информации:</br> **1**. свечи;</br> **2**. стаканы;</br> **3**. торговые статусы;</br> **4**. лента сделок.
///
/// Usage: instantiate `MarketDataServiceClient`, then call methods of this protocol to make API calls.
public protocol MarketDataServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: MarketDataServiceClientInterceptorFactoryProtocol? { get }

  func getCandles(
    _ request: GetCandlesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetCandlesRequest, GetCandlesResponse>

  func getLastPrices(
    _ request: GetLastPricesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetLastPricesRequest, GetLastPricesResponse>

  func getOrderBook(
    _ request: GetOrderBookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetOrderBookRequest, GetOrderBookResponse>

  func getTradingStatus(
    _ request: GetTradingStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetTradingStatusRequest, GetTradingStatusResponse>

  func getLastTrades(
    _ request: GetLastTradesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetLastTradesRequest, GetLastTradesResponse>

  func getClosePrices(
    _ request: GetClosePricesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetClosePricesRequest, GetClosePricesResponse>
}

extension MarketDataServiceClientProtocol {
  public var serviceName: String {
    return "tinkoff.public.invest.api.contract.v1.MarketDataService"
  }

  ///Метод запроса исторических свечей по инструменту.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCandles.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCandles(
    _ request: GetCandlesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetCandlesRequest, GetCandlesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetCandles",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCandlesInterceptors() ?? []
    )
  }

  ///Метод запроса последних цен по инструментам.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLastPrices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLastPrices(
    _ request: GetLastPricesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetLastPricesRequest, GetLastPricesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastPrices",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastPricesInterceptors() ?? []
    )
  }

  ///Метод получения стакана по инструменту.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrderBook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOrderBook(
    _ request: GetOrderBookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetOrderBookRequest, GetOrderBookResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetOrderBook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrderBookInterceptors() ?? []
    )
  }

  ///Метод запроса статуса торгов по инструментам.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTradingStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTradingStatus(
    _ request: GetTradingStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetTradingStatusRequest, GetTradingStatusResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTradingStatusInterceptors() ?? []
    )
  }

  ///Метод запроса обезличенных сделок за последний час.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLastTrades.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLastTrades(
    _ request: GetLastTradesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetLastTradesRequest, GetLastTradesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastTrades",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastTradesInterceptors() ?? []
    )
  }

  ///Метод запроса цен закрытия торговой сессии по инструментам.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetClosePrices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getClosePrices(
    _ request: GetClosePricesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetClosePricesRequest, GetClosePricesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetClosePrices",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetClosePricesInterceptors() ?? []
    )
  }
}

public protocol MarketDataServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getCandles'.
  func makeGetCandlesInterceptors() -> [ClientInterceptor<GetCandlesRequest, GetCandlesResponse>]

  /// - Returns: Interceptors to use when invoking 'getLastPrices'.
  func makeGetLastPricesInterceptors() -> [ClientInterceptor<GetLastPricesRequest, GetLastPricesResponse>]

  /// - Returns: Interceptors to use when invoking 'getOrderBook'.
  func makeGetOrderBookInterceptors() -> [ClientInterceptor<GetOrderBookRequest, GetOrderBookResponse>]

  /// - Returns: Interceptors to use when invoking 'getTradingStatus'.
  func makeGetTradingStatusInterceptors() -> [ClientInterceptor<GetTradingStatusRequest, GetTradingStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'getLastTrades'.
  func makeGetLastTradesInterceptors() -> [ClientInterceptor<GetLastTradesRequest, GetLastTradesResponse>]

  /// - Returns: Interceptors to use when invoking 'getClosePrices'.
  func makeGetClosePricesInterceptors() -> [ClientInterceptor<GetClosePricesRequest, GetClosePricesResponse>]
}

public final class MarketDataServiceClient: MarketDataServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: MarketDataServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the tinkoff.public.invest.api.contract.v1.MarketDataService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: MarketDataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `MarketDataStreamServiceClient`, then call methods of this protocol to make API calls.
public protocol MarketDataStreamServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: MarketDataStreamServiceClientInterceptorFactoryProtocol? { get }

  func marketDataStream(
    callOptions: CallOptions?,
    handler: @escaping (MarketDataResponse) -> Void
  ) -> BidirectionalStreamingCall<MarketDataRequest, MarketDataResponse>

  func marketDataServerSideStream(
    _ request: MarketDataServerSideStreamRequest,
    callOptions: CallOptions?,
    handler: @escaping (MarketDataResponse) -> Void
  ) -> ServerStreamingCall<MarketDataServerSideStreamRequest, MarketDataResponse>
}

extension MarketDataStreamServiceClientProtocol {
  public var serviceName: String {
    return "tinkoff.public.invest.api.contract.v1.MarketDataStreamService"
  }

  ///Bi-directional стрим предоставления биржевой информации.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func marketDataStream(
    callOptions: CallOptions? = nil,
    handler: @escaping (MarketDataResponse) -> Void
  ) -> BidirectionalStreamingCall<MarketDataRequest, MarketDataResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataStream",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketDataStreamInterceptors() ?? [],
      handler: handler
    )
  }

  ///Server-side стрим предоставления биржевой информации.
  ///
  /// - Parameters:
  ///   - request: Request to send to MarketDataServerSideStream.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func marketDataServerSideStream(
    _ request: MarketDataServerSideStreamRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (MarketDataResponse) -> Void
  ) -> ServerStreamingCall<MarketDataServerSideStreamRequest, MarketDataResponse> {
    return self.makeServerStreamingCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataServerSideStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketDataServerSideStreamInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol MarketDataStreamServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'marketDataStream'.
  func makeMarketDataStreamInterceptors() -> [ClientInterceptor<MarketDataRequest, MarketDataResponse>]

  /// - Returns: Interceptors to use when invoking 'marketDataServerSideStream'.
  func makeMarketDataServerSideStreamInterceptors() -> [ClientInterceptor<MarketDataServerSideStreamRequest, MarketDataResponse>]
}

public final class MarketDataStreamServiceClient: MarketDataStreamServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: MarketDataStreamServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the tinkoff.public.invest.api.contract.v1.MarketDataStreamService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: MarketDataStreamServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///Сервис получения биржевой информации:</br> **1**. свечи;</br> **2**. стаканы;</br> **3**. торговые статусы;</br> **4**. лента сделок.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol MarketDataServiceProvider: CallHandlerProvider {
  var interceptors: MarketDataServiceServerInterceptorFactoryProtocol? { get }

  ///Метод запроса исторических свечей по инструменту.
  func getCandles(request: GetCandlesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetCandlesResponse>

  ///Метод запроса последних цен по инструментам.
  func getLastPrices(request: GetLastPricesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetLastPricesResponse>

  ///Метод получения стакана по инструменту.
  func getOrderBook(request: GetOrderBookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetOrderBookResponse>

  ///Метод запроса статуса торгов по инструментам.
  func getTradingStatus(request: GetTradingStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetTradingStatusResponse>

  ///Метод запроса обезличенных сделок за последний час.
  func getLastTrades(request: GetLastTradesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetLastTradesResponse>

  ///Метод запроса цен закрытия торговой сессии по инструментам.
  func getClosePrices(request: GetClosePricesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetClosePricesResponse>
}

extension MarketDataServiceProvider {
  public var serviceName: Substring { return "tinkoff.public.invest.api.contract.v1.MarketDataService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetCandles":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetCandlesRequest>(),
        responseSerializer: ProtobufSerializer<GetCandlesResponse>(),
        interceptors: self.interceptors?.makeGetCandlesInterceptors() ?? [],
        userFunction: self.getCandles(request:context:)
      )

    case "GetLastPrices":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetLastPricesRequest>(),
        responseSerializer: ProtobufSerializer<GetLastPricesResponse>(),
        interceptors: self.interceptors?.makeGetLastPricesInterceptors() ?? [],
        userFunction: self.getLastPrices(request:context:)
      )

    case "GetOrderBook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetOrderBookRequest>(),
        responseSerializer: ProtobufSerializer<GetOrderBookResponse>(),
        interceptors: self.interceptors?.makeGetOrderBookInterceptors() ?? [],
        userFunction: self.getOrderBook(request:context:)
      )

    case "GetTradingStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetTradingStatusRequest>(),
        responseSerializer: ProtobufSerializer<GetTradingStatusResponse>(),
        interceptors: self.interceptors?.makeGetTradingStatusInterceptors() ?? [],
        userFunction: self.getTradingStatus(request:context:)
      )

    case "GetLastTrades":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetLastTradesRequest>(),
        responseSerializer: ProtobufSerializer<GetLastTradesResponse>(),
        interceptors: self.interceptors?.makeGetLastTradesInterceptors() ?? [],
        userFunction: self.getLastTrades(request:context:)
      )

    case "GetClosePrices":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetClosePricesRequest>(),
        responseSerializer: ProtobufSerializer<GetClosePricesResponse>(),
        interceptors: self.interceptors?.makeGetClosePricesInterceptors() ?? [],
        userFunction: self.getClosePrices(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol MarketDataServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getCandles'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCandlesInterceptors() -> [ServerInterceptor<GetCandlesRequest, GetCandlesResponse>]

  /// - Returns: Interceptors to use when handling 'getLastPrices'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLastPricesInterceptors() -> [ServerInterceptor<GetLastPricesRequest, GetLastPricesResponse>]

  /// - Returns: Interceptors to use when handling 'getOrderBook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrderBookInterceptors() -> [ServerInterceptor<GetOrderBookRequest, GetOrderBookResponse>]

  /// - Returns: Interceptors to use when handling 'getTradingStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTradingStatusInterceptors() -> [ServerInterceptor<GetTradingStatusRequest, GetTradingStatusResponse>]

  /// - Returns: Interceptors to use when handling 'getLastTrades'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLastTradesInterceptors() -> [ServerInterceptor<GetLastTradesRequest, GetLastTradesResponse>]

  /// - Returns: Interceptors to use when handling 'getClosePrices'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetClosePricesInterceptors() -> [ServerInterceptor<GetClosePricesRequest, GetClosePricesResponse>]
}
/// To build a server, implement a class that conforms to this protocol.
public protocol MarketDataStreamServiceProvider: CallHandlerProvider {
  var interceptors: MarketDataStreamServiceServerInterceptorFactoryProtocol? { get }

  ///Bi-directional стрим предоставления биржевой информации.
  func marketDataStream(context: StreamingResponseCallContext<MarketDataResponse>) -> EventLoopFuture<(StreamEvent<MarketDataRequest>) -> Void>

  ///Server-side стрим предоставления биржевой информации.
  func marketDataServerSideStream(request: MarketDataServerSideStreamRequest, context: StreamingResponseCallContext<MarketDataResponse>) -> EventLoopFuture<GRPCStatus>
}

extension MarketDataStreamServiceProvider {
  public var serviceName: Substring { return "tinkoff.public.invest.api.contract.v1.MarketDataStreamService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MarketDataStream":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MarketDataRequest>(),
        responseSerializer: ProtobufSerializer<MarketDataResponse>(),
        interceptors: self.interceptors?.makeMarketDataStreamInterceptors() ?? [],
        observerFactory: self.marketDataStream(context:)
      )

    case "MarketDataServerSideStream":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MarketDataServerSideStreamRequest>(),
        responseSerializer: ProtobufSerializer<MarketDataResponse>(),
        interceptors: self.interceptors?.makeMarketDataServerSideStreamInterceptors() ?? [],
        userFunction: self.marketDataServerSideStream(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol MarketDataStreamServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'marketDataStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMarketDataStreamInterceptors() -> [ServerInterceptor<MarketDataRequest, MarketDataResponse>]

  /// - Returns: Interceptors to use when handling 'marketDataServerSideStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMarketDataServerSideStreamInterceptors() -> [ServerInterceptor<MarketDataServerSideStreamRequest, MarketDataResponse>]
}
