// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: orders.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///Направление операции.
public enum OrderDirection: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Значение не указано
  case unspecified // = 0

  ///Покупка
  case buy // = 1

  ///Продажа
  case sell // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .buy
    case 2: self = .sell
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .buy: return 1
    case .sell: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension OrderDirection: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [OrderDirection] = [
    .unspecified,
    .buy,
    .sell,
  ]
}

#endif  // swift(>=4.2)

///Тип заявки.
public enum OrderType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Значение не указано
  case unspecified // = 0

  ///Лимитная
  case limit // = 1

  ///Рыночная
  case market // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .limit
    case 2: self = .market
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .limit: return 1
    case .market: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension OrderType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [OrderType] = [
    .unspecified,
    .limit,
    .market,
  ]
}

#endif  // swift(>=4.2)

///Текущий статус заявки (поручения)
public enum OrderExecutionReportStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case executionReportStatusUnspecified // = 0

  ///Исполнена
  case executionReportStatusFill // = 1

  ///Отклонена
  case executionReportStatusRejected // = 2

  ///Отменена пользователем
  case executionReportStatusCancelled // = 3

  ///Новая
  case executionReportStatusNew // = 4

  ///Частично исполнена
  case executionReportStatusPartiallyfill // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .executionReportStatusUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .executionReportStatusUnspecified
    case 1: self = .executionReportStatusFill
    case 2: self = .executionReportStatusRejected
    case 3: self = .executionReportStatusCancelled
    case 4: self = .executionReportStatusNew
    case 5: self = .executionReportStatusPartiallyfill
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .executionReportStatusUnspecified: return 0
    case .executionReportStatusFill: return 1
    case .executionReportStatusRejected: return 2
    case .executionReportStatusCancelled: return 3
    case .executionReportStatusNew: return 4
    case .executionReportStatusPartiallyfill: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension OrderExecutionReportStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [OrderExecutionReportStatus] = [
    .executionReportStatusUnspecified,
    .executionReportStatusFill,
    .executionReportStatusRejected,
    .executionReportStatusCancelled,
    .executionReportStatusNew,
    .executionReportStatusPartiallyfill,
  ]
}

#endif  // swift(>=4.2)

///Тип цены.
public enum PriceType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Значение не определено.
  case unspecified // = 0

  ///Цена в пунктах (только для фьючерсов и облигаций).
  case point // = 1

  ///Цена в валюте расчётов по инструменту.
  case currency // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .point
    case 2: self = .currency
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .point: return 1
    case .currency: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension PriceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [PriceType] = [
    .unspecified,
    .point,
    .currency,
  ]
}

#endif  // swift(>=4.2)

///Запрос установки соединения.
public struct TradesStreamRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Идентификаторы счетов.
  public var accounts: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Информация о торговых поручениях.
public struct TradesStreamResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: TradesStreamResponse.OneOf_Payload? = nil

  ///Информация об исполнении торгового поручения.
  public var orderTrades: OrderTrades {
    get {
      if case .orderTrades(let v)? = payload {return v}
      return OrderTrades()
    }
    set {payload = .orderTrades(newValue)}
  }

  ///Проверка активности стрима.
  public var ping: Ping {
    get {
      if case .ping(let v)? = payload {return v}
      return Ping()
    }
    set {payload = .ping(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    ///Информация об исполнении торгового поручения.
    case orderTrades(OrderTrades)
    ///Проверка активности стрима.
    case ping(Ping)

  #if !swift(>=4.1)
    public static func ==(lhs: TradesStreamResponse.OneOf_Payload, rhs: TradesStreamResponse.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.orderTrades, .orderTrades): return {
        guard case .orderTrades(let l) = lhs, case .orderTrades(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ping, .ping): return {
        guard case .ping(let l) = lhs, case .ping(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

///Информация об исполнении торгового поручения.
public struct OrderTrades {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Идентификатор торгового поручения.
  public var orderID: String = String()

  ///Дата и время создания сообщения в часовом поясе UTC.
  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  ///Направление сделки.
  public var direction: OrderDirection = .unspecified

  ///Figi-идентификатор инструмента.
  public var figi: String = String()

  ///Массив сделок.
  public var trades: [OrderTrade] = []

  ///Идентификатор счёта.
  public var accountID: String = String()

  ///UID идентификатор инструмента.
  public var instrumentUid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///Информация о сделке.
public struct OrderTrade {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Дата и время совершения сделки в часовом поясе UTC.
  public var dateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _dateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_dateTime = newValue}
  }
  /// Returns true if `dateTime` has been explicitly set.
  public var hasDateTime: Bool {return self._dateTime != nil}
  /// Clears the value of `dateTime`. Subsequent reads from it will return its default value.
  public mutating func clearDateTime() {self._dateTime = nil}

  ///Цена одного инструмента, по которой совершена сделка.
  public var price: Quotation {
    get {return _price ?? Quotation()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  public var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  public mutating func clearPrice() {self._price = nil}

  ///Количество лотов в сделке.
  public var quantity: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _dateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _price: Quotation? = nil
}

///Запрос выставления торгового поручения.
public struct PostOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Figi-идентификатор инструмента.
  public var figi: String = String()

  ///Количество лотов.
  public var quantity: Int64 = 0

  ///Цена одного инструмента. Для получения стоимости лота требуется умножить на лотность инструмента. Игнорируется для рыночных поручений.
  public var price: Quotation {
    get {return _price ?? Quotation()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  public var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  public mutating func clearPrice() {self._price = nil}

  ///Направление операции.
  public var direction: OrderDirection = .unspecified

  ///Номер счёта.
  public var accountID: String = String()

  ///Тип заявки.
  public var orderType: OrderType = .unspecified

  ///Идентификатор запроса выставления поручения для целей идемпотентности. Максимальная длина 36 символов.
  public var orderID: String = String()

  ///Идентификатор инструмента, принимает значения Figi или Instrument_uid.
  public var instrumentID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _price: Quotation? = nil
}

///Информация о выставлении поручения.
public struct PostOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Идентификатор заявки.
  public var orderID: String {
    get {return _storage._orderID}
    set {_uniqueStorage()._orderID = newValue}
  }

  ///Текущий статус заявки.
  public var executionReportStatus: OrderExecutionReportStatus {
    get {return _storage._executionReportStatus}
    set {_uniqueStorage()._executionReportStatus = newValue}
  }

  ///Запрошено лотов.
  public var lotsRequested: Int64 {
    get {return _storage._lotsRequested}
    set {_uniqueStorage()._lotsRequested = newValue}
  }

  ///Исполнено лотов.
  public var lotsExecuted: Int64 {
    get {return _storage._lotsExecuted}
    set {_uniqueStorage()._lotsExecuted = newValue}
  }

  ///Начальная цена заявки. Произведение количества запрошенных лотов на цену.
  public var initialOrderPrice: MoneyValue {
    get {return _storage._initialOrderPrice ?? MoneyValue()}
    set {_uniqueStorage()._initialOrderPrice = newValue}
  }
  /// Returns true if `initialOrderPrice` has been explicitly set.
  public var hasInitialOrderPrice: Bool {return _storage._initialOrderPrice != nil}
  /// Clears the value of `initialOrderPrice`. Subsequent reads from it will return its default value.
  public mutating func clearInitialOrderPrice() {_uniqueStorage()._initialOrderPrice = nil}

  ///Исполненная цена заявки. Произведение средней цены покупки на количество лотов.
  public var executedOrderPrice: MoneyValue {
    get {return _storage._executedOrderPrice ?? MoneyValue()}
    set {_uniqueStorage()._executedOrderPrice = newValue}
  }
  /// Returns true if `executedOrderPrice` has been explicitly set.
  public var hasExecutedOrderPrice: Bool {return _storage._executedOrderPrice != nil}
  /// Clears the value of `executedOrderPrice`. Subsequent reads from it will return its default value.
  public mutating func clearExecutedOrderPrice() {_uniqueStorage()._executedOrderPrice = nil}

  ///Итоговая стоимость заявки, включающая все комиссии.
  public var totalOrderAmount: MoneyValue {
    get {return _storage._totalOrderAmount ?? MoneyValue()}
    set {_uniqueStorage()._totalOrderAmount = newValue}
  }
  /// Returns true if `totalOrderAmount` has been explicitly set.
  public var hasTotalOrderAmount: Bool {return _storage._totalOrderAmount != nil}
  /// Clears the value of `totalOrderAmount`. Subsequent reads from it will return its default value.
  public mutating func clearTotalOrderAmount() {_uniqueStorage()._totalOrderAmount = nil}

  ///Начальная комиссия. Комиссия рассчитанная при выставлении заявки.
  public var initialCommission: MoneyValue {
    get {return _storage._initialCommission ?? MoneyValue()}
    set {_uniqueStorage()._initialCommission = newValue}
  }
  /// Returns true if `initialCommission` has been explicitly set.
  public var hasInitialCommission: Bool {return _storage._initialCommission != nil}
  /// Clears the value of `initialCommission`. Subsequent reads from it will return its default value.
  public mutating func clearInitialCommission() {_uniqueStorage()._initialCommission = nil}

  ///Фактическая комиссия по итогам исполнения заявки.
  public var executedCommission: MoneyValue {
    get {return _storage._executedCommission ?? MoneyValue()}
    set {_uniqueStorage()._executedCommission = newValue}
  }
  /// Returns true if `executedCommission` has been explicitly set.
  public var hasExecutedCommission: Bool {return _storage._executedCommission != nil}
  /// Clears the value of `executedCommission`. Subsequent reads from it will return its default value.
  public mutating func clearExecutedCommission() {_uniqueStorage()._executedCommission = nil}

  ///Значение НКД (накопленного купонного дохода) на дату. Подробнее: [НКД при выставлении торговых поручений](https://tinkoff.github.io/investAPI/head-orders#coupon)
  public var aciValue: MoneyValue {
    get {return _storage._aciValue ?? MoneyValue()}
    set {_uniqueStorage()._aciValue = newValue}
  }
  /// Returns true if `aciValue` has been explicitly set.
  public var hasAciValue: Bool {return _storage._aciValue != nil}
  /// Clears the value of `aciValue`. Subsequent reads from it will return its default value.
  public mutating func clearAciValue() {_uniqueStorage()._aciValue = nil}

  /// Figi-идентификатор инструмента.
  public var figi: String {
    get {return _storage._figi}
    set {_uniqueStorage()._figi = newValue}
  }

  ///Направление сделки.
  public var direction: OrderDirection {
    get {return _storage._direction}
    set {_uniqueStorage()._direction = newValue}
  }

  ///Начальная цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
  public var initialSecurityPrice: MoneyValue {
    get {return _storage._initialSecurityPrice ?? MoneyValue()}
    set {_uniqueStorage()._initialSecurityPrice = newValue}
  }
  /// Returns true if `initialSecurityPrice` has been explicitly set.
  public var hasInitialSecurityPrice: Bool {return _storage._initialSecurityPrice != nil}
  /// Clears the value of `initialSecurityPrice`. Subsequent reads from it will return its default value.
  public mutating func clearInitialSecurityPrice() {_uniqueStorage()._initialSecurityPrice = nil}

  ///Тип заявки.
  public var orderType: OrderType {
    get {return _storage._orderType}
    set {_uniqueStorage()._orderType = newValue}
  }

  ///Дополнительные данные об исполнении заявки.
  public var message: String {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  ///Начальная цена заявки в пунктах (для фьючерсов).
  public var initialOrderPricePt: Quotation {
    get {return _storage._initialOrderPricePt ?? Quotation()}
    set {_uniqueStorage()._initialOrderPricePt = newValue}
  }
  /// Returns true if `initialOrderPricePt` has been explicitly set.
  public var hasInitialOrderPricePt: Bool {return _storage._initialOrderPricePt != nil}
  /// Clears the value of `initialOrderPricePt`. Subsequent reads from it will return its default value.
  public mutating func clearInitialOrderPricePt() {_uniqueStorage()._initialOrderPricePt = nil}

  ///UID идентификатор инструмента.
  public var instrumentUid: String {
    get {return _storage._instrumentUid}
    set {_uniqueStorage()._instrumentUid = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Запрос отмены торгового поручения.
public struct CancelOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Номер счёта.
  public var accountID: String = String()

  ///Идентификатор заявки.
  public var orderID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Результат отмены торгового поручения.
public struct CancelOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Дата и время отмены заявки в часовом поясе UTC.
  public var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  public var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  public mutating func clearTime() {self._time = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///Запрос получения статуса торгового поручения.
public struct GetOrderStateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Номер счёта.
  public var accountID: String = String()

  ///Идентификатор заявки.
  public var orderID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Запрос получения списка активных торговых поручений.
public struct GetOrdersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Номер счёта.
  public var accountID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Список активных торговых поручений.
public struct GetOrdersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Массив активных заявок.
  public var orders: [OrderState] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Информация о торговом поручении.
public struct OrderState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Идентификатор заявки.
  public var orderID: String {
    get {return _storage._orderID}
    set {_uniqueStorage()._orderID = newValue}
  }

  ///Текущий статус заявки.
  public var executionReportStatus: OrderExecutionReportStatus {
    get {return _storage._executionReportStatus}
    set {_uniqueStorage()._executionReportStatus = newValue}
  }

  ///Запрошено лотов.
  public var lotsRequested: Int64 {
    get {return _storage._lotsRequested}
    set {_uniqueStorage()._lotsRequested = newValue}
  }

  ///Исполнено лотов.
  public var lotsExecuted: Int64 {
    get {return _storage._lotsExecuted}
    set {_uniqueStorage()._lotsExecuted = newValue}
  }

  ///Начальная цена заявки. Произведение количества запрошенных лотов на цену.
  public var initialOrderPrice: MoneyValue {
    get {return _storage._initialOrderPrice ?? MoneyValue()}
    set {_uniqueStorage()._initialOrderPrice = newValue}
  }
  /// Returns true if `initialOrderPrice` has been explicitly set.
  public var hasInitialOrderPrice: Bool {return _storage._initialOrderPrice != nil}
  /// Clears the value of `initialOrderPrice`. Subsequent reads from it will return its default value.
  public mutating func clearInitialOrderPrice() {_uniqueStorage()._initialOrderPrice = nil}

  ///Исполненная цена заявки. Произведение средней цены покупки на количество лотов.
  public var executedOrderPrice: MoneyValue {
    get {return _storage._executedOrderPrice ?? MoneyValue()}
    set {_uniqueStorage()._executedOrderPrice = newValue}
  }
  /// Returns true if `executedOrderPrice` has been explicitly set.
  public var hasExecutedOrderPrice: Bool {return _storage._executedOrderPrice != nil}
  /// Clears the value of `executedOrderPrice`. Subsequent reads from it will return its default value.
  public mutating func clearExecutedOrderPrice() {_uniqueStorage()._executedOrderPrice = nil}

  ///Итоговая стоимость заявки, включающая все комиссии.
  public var totalOrderAmount: MoneyValue {
    get {return _storage._totalOrderAmount ?? MoneyValue()}
    set {_uniqueStorage()._totalOrderAmount = newValue}
  }
  /// Returns true if `totalOrderAmount` has been explicitly set.
  public var hasTotalOrderAmount: Bool {return _storage._totalOrderAmount != nil}
  /// Clears the value of `totalOrderAmount`. Subsequent reads from it will return its default value.
  public mutating func clearTotalOrderAmount() {_uniqueStorage()._totalOrderAmount = nil}

  ///Средняя цена позиции по сделке.
  public var averagePositionPrice: MoneyValue {
    get {return _storage._averagePositionPrice ?? MoneyValue()}
    set {_uniqueStorage()._averagePositionPrice = newValue}
  }
  /// Returns true if `averagePositionPrice` has been explicitly set.
  public var hasAveragePositionPrice: Bool {return _storage._averagePositionPrice != nil}
  /// Clears the value of `averagePositionPrice`. Subsequent reads from it will return its default value.
  public mutating func clearAveragePositionPrice() {_uniqueStorage()._averagePositionPrice = nil}

  ///Начальная комиссия. Комиссия, рассчитанная на момент подачи заявки.
  public var initialCommission: MoneyValue {
    get {return _storage._initialCommission ?? MoneyValue()}
    set {_uniqueStorage()._initialCommission = newValue}
  }
  /// Returns true if `initialCommission` has been explicitly set.
  public var hasInitialCommission: Bool {return _storage._initialCommission != nil}
  /// Clears the value of `initialCommission`. Subsequent reads from it will return its default value.
  public mutating func clearInitialCommission() {_uniqueStorage()._initialCommission = nil}

  ///Фактическая комиссия по итогам исполнения заявки.
  public var executedCommission: MoneyValue {
    get {return _storage._executedCommission ?? MoneyValue()}
    set {_uniqueStorage()._executedCommission = newValue}
  }
  /// Returns true if `executedCommission` has been explicitly set.
  public var hasExecutedCommission: Bool {return _storage._executedCommission != nil}
  /// Clears the value of `executedCommission`. Subsequent reads from it will return its default value.
  public mutating func clearExecutedCommission() {_uniqueStorage()._executedCommission = nil}

  ///Figi-идентификатор инструмента.
  public var figi: String {
    get {return _storage._figi}
    set {_uniqueStorage()._figi = newValue}
  }

  ///Направление заявки.
  public var direction: OrderDirection {
    get {return _storage._direction}
    set {_uniqueStorage()._direction = newValue}
  }

  ///Начальная цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
  public var initialSecurityPrice: MoneyValue {
    get {return _storage._initialSecurityPrice ?? MoneyValue()}
    set {_uniqueStorage()._initialSecurityPrice = newValue}
  }
  /// Returns true if `initialSecurityPrice` has been explicitly set.
  public var hasInitialSecurityPrice: Bool {return _storage._initialSecurityPrice != nil}
  /// Clears the value of `initialSecurityPrice`. Subsequent reads from it will return its default value.
  public mutating func clearInitialSecurityPrice() {_uniqueStorage()._initialSecurityPrice = nil}

  ///Стадии выполнения заявки.
  public var stages: [OrderStage] {
    get {return _storage._stages}
    set {_uniqueStorage()._stages = newValue}
  }

  ///Сервисная комиссия.
  public var serviceCommission: MoneyValue {
    get {return _storage._serviceCommission ?? MoneyValue()}
    set {_uniqueStorage()._serviceCommission = newValue}
  }
  /// Returns true if `serviceCommission` has been explicitly set.
  public var hasServiceCommission: Bool {return _storage._serviceCommission != nil}
  /// Clears the value of `serviceCommission`. Subsequent reads from it will return its default value.
  public mutating func clearServiceCommission() {_uniqueStorage()._serviceCommission = nil}

  ///Валюта заявки.
  public var currency: String {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  ///Тип заявки.
  public var orderType: OrderType {
    get {return _storage._orderType}
    set {_uniqueStorage()._orderType = newValue}
  }

  ///Дата и время выставления заявки в часовом поясе UTC.
  public var orderDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._orderDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._orderDate = newValue}
  }
  /// Returns true if `orderDate` has been explicitly set.
  public var hasOrderDate: Bool {return _storage._orderDate != nil}
  /// Clears the value of `orderDate`. Subsequent reads from it will return its default value.
  public mutating func clearOrderDate() {_uniqueStorage()._orderDate = nil}

  ///UID идентификатор инструмента.
  public var instrumentUid: String {
    get {return _storage._instrumentUid}
    set {_uniqueStorage()._instrumentUid = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Сделки в рамках торгового поручения.
public struct OrderStage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента..
  public var price: MoneyValue {
    get {return _price ?? MoneyValue()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  public var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  public mutating func clearPrice() {self._price = nil}

  ///Количество лотов.
  public var quantity: Int64 = 0

  ///Идентификатор торговой операции.
  public var tradeID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _price: MoneyValue? = nil
}

///Запрос изменения выставленной заявки.
public struct ReplaceOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Номер счета.
  public var accountID: String = String()

  ///Идентификатор заявки на бирже.
  public var orderID: String = String()

  ///Новый идентификатор запроса выставления поручения для целей идемпотентности. Максимальная длина 36 символов. Перезатирает старый ключ.
  public var idempotencyKey: String = String()

  ///Количество лотов.
  public var quantity: Int64 = 0

  ///Цена за 1 инструмент.
  public var price: Quotation {
    get {return _price ?? Quotation()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  public var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  public mutating func clearPrice() {self._price = nil}

  ///Тип цены.
  public var priceType: PriceType = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _price: Quotation? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tinkoff.public.invest.api.contract.v1"

extension OrderDirection: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORDER_DIRECTION_UNSPECIFIED"),
    1: .same(proto: "ORDER_DIRECTION_BUY"),
    2: .same(proto: "ORDER_DIRECTION_SELL"),
  ]
}

extension OrderType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORDER_TYPE_UNSPECIFIED"),
    1: .same(proto: "ORDER_TYPE_LIMIT"),
    2: .same(proto: "ORDER_TYPE_MARKET"),
  ]
}

extension OrderExecutionReportStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EXECUTION_REPORT_STATUS_UNSPECIFIED"),
    1: .same(proto: "EXECUTION_REPORT_STATUS_FILL"),
    2: .same(proto: "EXECUTION_REPORT_STATUS_REJECTED"),
    3: .same(proto: "EXECUTION_REPORT_STATUS_CANCELLED"),
    4: .same(proto: "EXECUTION_REPORT_STATUS_NEW"),
    5: .same(proto: "EXECUTION_REPORT_STATUS_PARTIALLYFILL"),
  ]
}

extension PriceType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRICE_TYPE_UNSPECIFIED"),
    1: .same(proto: "PRICE_TYPE_POINT"),
    2: .same(proto: "PRICE_TYPE_CURRENCY"),
  ]
}

extension TradesStreamRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TradesStreamRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.accounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accounts.isEmpty {
      try visitor.visitRepeatedStringField(value: self.accounts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TradesStreamRequest, rhs: TradesStreamRequest) -> Bool {
    if lhs.accounts != rhs.accounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TradesStreamResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TradesStreamResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_trades"),
    2: .same(proto: "ping"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: OrderTrades?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .orderTrades(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .orderTrades(v)
        }
      }()
      case 2: try {
        var v: Ping?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .ping(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .ping(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .orderTrades?: try {
      guard case .orderTrades(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .ping?: try {
      guard case .ping(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TradesStreamResponse, rhs: TradesStreamResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OrderTrades: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OrderTrades"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .standard(proto: "created_at"),
    3: .same(proto: "direction"),
    4: .same(proto: "figi"),
    5: .same(proto: "trades"),
    6: .standard(proto: "account_id"),
    7: .standard(proto: "instrument_uid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.figi) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.trades) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.accountID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.instrumentUid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 1)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.direction != .unspecified {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 3)
    }
    if !self.figi.isEmpty {
      try visitor.visitSingularStringField(value: self.figi, fieldNumber: 4)
    }
    if !self.trades.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trades, fieldNumber: 5)
    }
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 6)
    }
    if !self.instrumentUid.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentUid, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: OrderTrades, rhs: OrderTrades) -> Bool {
    if lhs.orderID != rhs.orderID {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.direction != rhs.direction {return false}
    if lhs.figi != rhs.figi {return false}
    if lhs.trades != rhs.trades {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.instrumentUid != rhs.instrumentUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OrderTrade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OrderTrade"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "date_time"),
    2: .same(proto: "price"),
    3: .same(proto: "quantity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dateTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._price) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.quantity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._price {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.quantity != 0 {
      try visitor.visitSingularInt64Field(value: self.quantity, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: OrderTrade, rhs: OrderTrade) -> Bool {
    if lhs._dateTime != rhs._dateTime {return false}
    if lhs._price != rhs._price {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PostOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostOrderRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "figi"),
    2: .same(proto: "quantity"),
    3: .same(proto: "price"),
    4: .same(proto: "direction"),
    5: .standard(proto: "account_id"),
    6: .standard(proto: "order_type"),
    7: .standard(proto: "order_id"),
    8: .standard(proto: "instrument_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.figi) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.quantity) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._price) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.accountID) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.orderType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.orderID) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.instrumentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.figi.isEmpty {
      try visitor.visitSingularStringField(value: self.figi, fieldNumber: 1)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt64Field(value: self.quantity, fieldNumber: 2)
    }
    try { if let v = self._price {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.direction != .unspecified {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 4)
    }
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 5)
    }
    if self.orderType != .unspecified {
      try visitor.visitSingularEnumField(value: self.orderType, fieldNumber: 6)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 7)
    }
    if !self.instrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PostOrderRequest, rhs: PostOrderRequest) -> Bool {
    if lhs.figi != rhs.figi {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs._price != rhs._price {return false}
    if lhs.direction != rhs.direction {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.orderType != rhs.orderType {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.instrumentID != rhs.instrumentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PostOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostOrderResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .standard(proto: "execution_report_status"),
    3: .standard(proto: "lots_requested"),
    4: .standard(proto: "lots_executed"),
    5: .standard(proto: "initial_order_price"),
    6: .standard(proto: "executed_order_price"),
    7: .standard(proto: "total_order_amount"),
    8: .standard(proto: "initial_commission"),
    9: .standard(proto: "executed_commission"),
    10: .standard(proto: "aci_value"),
    11: .same(proto: "figi"),
    12: .same(proto: "direction"),
    13: .standard(proto: "initial_security_price"),
    14: .standard(proto: "order_type"),
    15: .same(proto: "message"),
    16: .standard(proto: "initial_order_price_pt"),
    17: .standard(proto: "instrument_uid"),
  ]

  fileprivate class _StorageClass {
    var _orderID: String = String()
    var _executionReportStatus: OrderExecutionReportStatus = .executionReportStatusUnspecified
    var _lotsRequested: Int64 = 0
    var _lotsExecuted: Int64 = 0
    var _initialOrderPrice: MoneyValue? = nil
    var _executedOrderPrice: MoneyValue? = nil
    var _totalOrderAmount: MoneyValue? = nil
    var _initialCommission: MoneyValue? = nil
    var _executedCommission: MoneyValue? = nil
    var _aciValue: MoneyValue? = nil
    var _figi: String = String()
    var _direction: OrderDirection = .unspecified
    var _initialSecurityPrice: MoneyValue? = nil
    var _orderType: OrderType = .unspecified
    var _message: String = String()
    var _initialOrderPricePt: Quotation? = nil
    var _instrumentUid: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _orderID = source._orderID
      _executionReportStatus = source._executionReportStatus
      _lotsRequested = source._lotsRequested
      _lotsExecuted = source._lotsExecuted
      _initialOrderPrice = source._initialOrderPrice
      _executedOrderPrice = source._executedOrderPrice
      _totalOrderAmount = source._totalOrderAmount
      _initialCommission = source._initialCommission
      _executedCommission = source._executedCommission
      _aciValue = source._aciValue
      _figi = source._figi
      _direction = source._direction
      _initialSecurityPrice = source._initialSecurityPrice
      _orderType = source._orderType
      _message = source._message
      _initialOrderPricePt = source._initialOrderPricePt
      _instrumentUid = source._instrumentUid
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._orderID) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._executionReportStatus) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._lotsRequested) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._lotsExecuted) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._initialOrderPrice) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._executedOrderPrice) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._totalOrderAmount) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._initialCommission) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._executedCommission) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._aciValue) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._figi) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._direction) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._initialSecurityPrice) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._orderType) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._message) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._initialOrderPricePt) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._instrumentUid) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._orderID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderID, fieldNumber: 1)
      }
      if _storage._executionReportStatus != .executionReportStatusUnspecified {
        try visitor.visitSingularEnumField(value: _storage._executionReportStatus, fieldNumber: 2)
      }
      if _storage._lotsRequested != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lotsRequested, fieldNumber: 3)
      }
      if _storage._lotsExecuted != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lotsExecuted, fieldNumber: 4)
      }
      try { if let v = _storage._initialOrderPrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._executedOrderPrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._totalOrderAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._initialCommission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._executedCommission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._aciValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._figi.isEmpty {
        try visitor.visitSingularStringField(value: _storage._figi, fieldNumber: 11)
      }
      if _storage._direction != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._direction, fieldNumber: 12)
      }
      try { if let v = _storage._initialSecurityPrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      if _storage._orderType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._orderType, fieldNumber: 14)
      }
      if !_storage._message.isEmpty {
        try visitor.visitSingularStringField(value: _storage._message, fieldNumber: 15)
      }
      try { if let v = _storage._initialOrderPricePt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      if !_storage._instrumentUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instrumentUid, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PostOrderResponse, rhs: PostOrderResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._orderID != rhs_storage._orderID {return false}
        if _storage._executionReportStatus != rhs_storage._executionReportStatus {return false}
        if _storage._lotsRequested != rhs_storage._lotsRequested {return false}
        if _storage._lotsExecuted != rhs_storage._lotsExecuted {return false}
        if _storage._initialOrderPrice != rhs_storage._initialOrderPrice {return false}
        if _storage._executedOrderPrice != rhs_storage._executedOrderPrice {return false}
        if _storage._totalOrderAmount != rhs_storage._totalOrderAmount {return false}
        if _storage._initialCommission != rhs_storage._initialCommission {return false}
        if _storage._executedCommission != rhs_storage._executedCommission {return false}
        if _storage._aciValue != rhs_storage._aciValue {return false}
        if _storage._figi != rhs_storage._figi {return false}
        if _storage._direction != rhs_storage._direction {return false}
        if _storage._initialSecurityPrice != rhs_storage._initialSecurityPrice {return false}
        if _storage._orderType != rhs_storage._orderType {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._initialOrderPricePt != rhs_storage._initialOrderPricePt {return false}
        if _storage._instrumentUid != rhs_storage._instrumentUid {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CancelOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CancelOrderRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "order_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.orderID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CancelOrderRequest, rhs: CancelOrderRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CancelOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CancelOrderResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CancelOrderResponse, rhs: CancelOrderResponse) -> Bool {
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetOrderStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOrderStateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "order_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.orderID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetOrderStateRequest, rhs: GetOrderStateRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetOrdersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOrdersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetOrdersRequest, rhs: GetOrdersRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetOrdersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOrdersResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orders"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.orders) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orders, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetOrdersResponse, rhs: GetOrdersResponse) -> Bool {
    if lhs.orders != rhs.orders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OrderState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OrderState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .standard(proto: "execution_report_status"),
    3: .standard(proto: "lots_requested"),
    4: .standard(proto: "lots_executed"),
    5: .standard(proto: "initial_order_price"),
    6: .standard(proto: "executed_order_price"),
    7: .standard(proto: "total_order_amount"),
    8: .standard(proto: "average_position_price"),
    9: .standard(proto: "initial_commission"),
    10: .standard(proto: "executed_commission"),
    11: .same(proto: "figi"),
    12: .same(proto: "direction"),
    13: .standard(proto: "initial_security_price"),
    14: .same(proto: "stages"),
    15: .standard(proto: "service_commission"),
    16: .same(proto: "currency"),
    17: .standard(proto: "order_type"),
    18: .standard(proto: "order_date"),
    19: .standard(proto: "instrument_uid"),
  ]

  fileprivate class _StorageClass {
    var _orderID: String = String()
    var _executionReportStatus: OrderExecutionReportStatus = .executionReportStatusUnspecified
    var _lotsRequested: Int64 = 0
    var _lotsExecuted: Int64 = 0
    var _initialOrderPrice: MoneyValue? = nil
    var _executedOrderPrice: MoneyValue? = nil
    var _totalOrderAmount: MoneyValue? = nil
    var _averagePositionPrice: MoneyValue? = nil
    var _initialCommission: MoneyValue? = nil
    var _executedCommission: MoneyValue? = nil
    var _figi: String = String()
    var _direction: OrderDirection = .unspecified
    var _initialSecurityPrice: MoneyValue? = nil
    var _stages: [OrderStage] = []
    var _serviceCommission: MoneyValue? = nil
    var _currency: String = String()
    var _orderType: OrderType = .unspecified
    var _orderDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _instrumentUid: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _orderID = source._orderID
      _executionReportStatus = source._executionReportStatus
      _lotsRequested = source._lotsRequested
      _lotsExecuted = source._lotsExecuted
      _initialOrderPrice = source._initialOrderPrice
      _executedOrderPrice = source._executedOrderPrice
      _totalOrderAmount = source._totalOrderAmount
      _averagePositionPrice = source._averagePositionPrice
      _initialCommission = source._initialCommission
      _executedCommission = source._executedCommission
      _figi = source._figi
      _direction = source._direction
      _initialSecurityPrice = source._initialSecurityPrice
      _stages = source._stages
      _serviceCommission = source._serviceCommission
      _currency = source._currency
      _orderType = source._orderType
      _orderDate = source._orderDate
      _instrumentUid = source._instrumentUid
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._orderID) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._executionReportStatus) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._lotsRequested) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._lotsExecuted) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._initialOrderPrice) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._executedOrderPrice) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._totalOrderAmount) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._averagePositionPrice) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._initialCommission) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._executedCommission) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._figi) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._direction) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._initialSecurityPrice) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._stages) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._serviceCommission) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._orderType) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._orderDate) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._instrumentUid) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._orderID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderID, fieldNumber: 1)
      }
      if _storage._executionReportStatus != .executionReportStatusUnspecified {
        try visitor.visitSingularEnumField(value: _storage._executionReportStatus, fieldNumber: 2)
      }
      if _storage._lotsRequested != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lotsRequested, fieldNumber: 3)
      }
      if _storage._lotsExecuted != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lotsExecuted, fieldNumber: 4)
      }
      try { if let v = _storage._initialOrderPrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._executedOrderPrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._totalOrderAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._averagePositionPrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._initialCommission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._executedCommission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._figi.isEmpty {
        try visitor.visitSingularStringField(value: _storage._figi, fieldNumber: 11)
      }
      if _storage._direction != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._direction, fieldNumber: 12)
      }
      try { if let v = _storage._initialSecurityPrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      if !_storage._stages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._stages, fieldNumber: 14)
      }
      try { if let v = _storage._serviceCommission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 16)
      }
      if _storage._orderType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._orderType, fieldNumber: 17)
      }
      try { if let v = _storage._orderDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      if !_storage._instrumentUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instrumentUid, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: OrderState, rhs: OrderState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._orderID != rhs_storage._orderID {return false}
        if _storage._executionReportStatus != rhs_storage._executionReportStatus {return false}
        if _storage._lotsRequested != rhs_storage._lotsRequested {return false}
        if _storage._lotsExecuted != rhs_storage._lotsExecuted {return false}
        if _storage._initialOrderPrice != rhs_storage._initialOrderPrice {return false}
        if _storage._executedOrderPrice != rhs_storage._executedOrderPrice {return false}
        if _storage._totalOrderAmount != rhs_storage._totalOrderAmount {return false}
        if _storage._averagePositionPrice != rhs_storage._averagePositionPrice {return false}
        if _storage._initialCommission != rhs_storage._initialCommission {return false}
        if _storage._executedCommission != rhs_storage._executedCommission {return false}
        if _storage._figi != rhs_storage._figi {return false}
        if _storage._direction != rhs_storage._direction {return false}
        if _storage._initialSecurityPrice != rhs_storage._initialSecurityPrice {return false}
        if _storage._stages != rhs_storage._stages {return false}
        if _storage._serviceCommission != rhs_storage._serviceCommission {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._orderType != rhs_storage._orderType {return false}
        if _storage._orderDate != rhs_storage._orderDate {return false}
        if _storage._instrumentUid != rhs_storage._instrumentUid {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OrderStage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OrderStage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "price"),
    2: .same(proto: "quantity"),
    3: .standard(proto: "trade_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._price) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.quantity) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tradeID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._price {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.quantity != 0 {
      try visitor.visitSingularInt64Field(value: self.quantity, fieldNumber: 2)
    }
    if !self.tradeID.isEmpty {
      try visitor.visitSingularStringField(value: self.tradeID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: OrderStage, rhs: OrderStage) -> Bool {
    if lhs._price != rhs._price {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.tradeID != rhs.tradeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ReplaceOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReplaceOrderRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    6: .standard(proto: "order_id"),
    7: .standard(proto: "idempotency_key"),
    11: .same(proto: "quantity"),
    12: .same(proto: "price"),
    13: .standard(proto: "price_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.orderID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.idempotencyKey) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.quantity) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._price) }()
      case 13: try { try decoder.decodeSingularEnumField(value: &self.priceType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 6)
    }
    if !self.idempotencyKey.isEmpty {
      try visitor.visitSingularStringField(value: self.idempotencyKey, fieldNumber: 7)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt64Field(value: self.quantity, fieldNumber: 11)
    }
    try { if let v = self._price {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    if self.priceType != .unspecified {
      try visitor.visitSingularEnumField(value: self.priceType, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ReplaceOrderRequest, rhs: ReplaceOrderRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.idempotencyKey != rhs.idempotencyKey {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs._price != rhs._price {return false}
    if lhs.priceType != rhs.priceType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
