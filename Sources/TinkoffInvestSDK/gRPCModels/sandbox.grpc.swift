//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sandbox.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///Сервис для работы с песочницей TINKOFF INVEST API
///
/// Usage: instantiate `SandboxServiceClient`, then call methods of this protocol to make API calls.
public protocol SandboxServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: SandboxServiceClientInterceptorFactoryProtocol? { get }

  func openSandboxAccount(
    _ request: OpenSandboxAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OpenSandboxAccountRequest, OpenSandboxAccountResponse>

  func getSandboxAccounts(
    _ request: GetAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetAccountsRequest, GetAccountsResponse>

  func closeSandboxAccount(
    _ request: CloseSandboxAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CloseSandboxAccountRequest, CloseSandboxAccountResponse>

  func postSandboxOrder(
    _ request: PostOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<PostOrderRequest, PostOrderResponse>

  func replaceSandboxOrder(
    _ request: ReplaceOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ReplaceOrderRequest, PostOrderResponse>

  func getSandboxOrders(
    _ request: GetOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetOrdersRequest, GetOrdersResponse>

  func cancelSandboxOrder(
    _ request: CancelOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CancelOrderRequest, CancelOrderResponse>

  func getSandboxOrderState(
    _ request: GetOrderStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetOrderStateRequest, OrderState>

  func getSandboxPositions(
    _ request: PositionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<PositionsRequest, PositionsResponse>

  func getSandboxOperations(
    _ request: OperationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OperationsRequest, OperationsResponse>

  func getSandboxOperationsByCursor(
    _ request: GetOperationsByCursorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetOperationsByCursorRequest, GetOperationsByCursorResponse>

  func getSandboxPortfolio(
    _ request: PortfolioRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<PortfolioRequest, PortfolioResponse>

  func sandboxPayIn(
    _ request: SandboxPayInRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SandboxPayInRequest, SandboxPayInResponse>

  func getSandboxWithdrawLimits(
    _ request: WithdrawLimitsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<WithdrawLimitsRequest, WithdrawLimitsResponse>
}

extension SandboxServiceClientProtocol {
  public var serviceName: String {
    return "tinkoff.public.invest.api.contract.v1.SandboxService"
  }

  ///Метод регистрации счёта в песочнице.
  ///
  /// - Parameters:
  ///   - request: Request to send to OpenSandboxAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func openSandboxAccount(
    _ request: OpenSandboxAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OpenSandboxAccountRequest, OpenSandboxAccountResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/OpenSandboxAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenSandboxAccountInterceptors() ?? []
    )
  }

  ///Метод получения счетов в песочнице.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSandboxAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSandboxAccounts(
    _ request: GetAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetAccountsRequest, GetAccountsResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxAccounts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSandboxAccountsInterceptors() ?? []
    )
  }

  ///Метод закрытия счёта в песочнице.
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseSandboxAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func closeSandboxAccount(
    _ request: CloseSandboxAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CloseSandboxAccountRequest, CloseSandboxAccountResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/CloseSandboxAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseSandboxAccountInterceptors() ?? []
    )
  }

  ///Метод выставления торгового поручения в песочнице.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostSandboxOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postSandboxOrder(
    _ request: PostOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<PostOrderRequest, PostOrderResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/PostSandboxOrder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostSandboxOrderInterceptors() ?? []
    )
  }

  ///Метод изменения выставленной заявки.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReplaceSandboxOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func replaceSandboxOrder(
    _ request: ReplaceOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ReplaceOrderRequest, PostOrderResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/ReplaceSandboxOrder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReplaceSandboxOrderInterceptors() ?? []
    )
  }

  ///Метод получения списка активных заявок по счёту в песочнице.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSandboxOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSandboxOrders(
    _ request: GetOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetOrdersRequest, GetOrdersResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSandboxOrdersInterceptors() ?? []
    )
  }

  ///Метод отмены торгового поручения в песочнице.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelSandboxOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancelSandboxOrder(
    _ request: CancelOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CancelOrderRequest, CancelOrderResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/CancelSandboxOrder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelSandboxOrderInterceptors() ?? []
    )
  }

  ///Метод получения статуса заявки в песочнице.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSandboxOrderState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSandboxOrderState(
    _ request: GetOrderStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetOrderStateRequest, OrderState> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrderState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSandboxOrderStateInterceptors() ?? []
    )
  }

  ///Метод получения позиций по виртуальному счёту песочницы.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSandboxPositions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSandboxPositions(
    _ request: PositionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<PositionsRequest, PositionsResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPositions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSandboxPositionsInterceptors() ?? []
    )
  }

  ///Метод получения операций в песочнице по номеру счёта.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSandboxOperations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSandboxOperations(
    _ request: OperationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OperationsRequest, OperationsResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSandboxOperationsInterceptors() ?? []
    )
  }

  ///Метод получения операций в песочнице по номеру счета с пагинацией.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSandboxOperationsByCursor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSandboxOperationsByCursor(
    _ request: GetOperationsByCursorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetOperationsByCursorRequest, GetOperationsByCursorResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperationsByCursor",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSandboxOperationsByCursorInterceptors() ?? []
    )
  }

  ///Метод получения портфолио в песочнице.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSandboxPortfolio.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSandboxPortfolio(
    _ request: PortfolioRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<PortfolioRequest, PortfolioResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPortfolio",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSandboxPortfolioInterceptors() ?? []
    )
  }

  ///Метод пополнения счёта в песочнице.
  ///
  /// - Parameters:
  ///   - request: Request to send to SandboxPayIn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sandboxPayIn(
    _ request: SandboxPayInRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SandboxPayInRequest, SandboxPayInResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/SandboxPayIn",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSandboxPayInInterceptors() ?? []
    )
  }

  ///Метод получения доступного остатка для вывода средств в песочнице.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSandboxWithdrawLimits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSandboxWithdrawLimits(
    _ request: WithdrawLimitsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<WithdrawLimitsRequest, WithdrawLimitsResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxWithdrawLimits",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSandboxWithdrawLimitsInterceptors() ?? []
    )
  }
}

public protocol SandboxServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'openSandboxAccount'.
  func makeOpenSandboxAccountInterceptors() -> [ClientInterceptor<OpenSandboxAccountRequest, OpenSandboxAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'getSandboxAccounts'.
  func makeGetSandboxAccountsInterceptors() -> [ClientInterceptor<GetAccountsRequest, GetAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'closeSandboxAccount'.
  func makeCloseSandboxAccountInterceptors() -> [ClientInterceptor<CloseSandboxAccountRequest, CloseSandboxAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'postSandboxOrder'.
  func makePostSandboxOrderInterceptors() -> [ClientInterceptor<PostOrderRequest, PostOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'replaceSandboxOrder'.
  func makeReplaceSandboxOrderInterceptors() -> [ClientInterceptor<ReplaceOrderRequest, PostOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'getSandboxOrders'.
  func makeGetSandboxOrdersInterceptors() -> [ClientInterceptor<GetOrdersRequest, GetOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelSandboxOrder'.
  func makeCancelSandboxOrderInterceptors() -> [ClientInterceptor<CancelOrderRequest, CancelOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'getSandboxOrderState'.
  func makeGetSandboxOrderStateInterceptors() -> [ClientInterceptor<GetOrderStateRequest, OrderState>]

  /// - Returns: Interceptors to use when invoking 'getSandboxPositions'.
  func makeGetSandboxPositionsInterceptors() -> [ClientInterceptor<PositionsRequest, PositionsResponse>]

  /// - Returns: Interceptors to use when invoking 'getSandboxOperations'.
  func makeGetSandboxOperationsInterceptors() -> [ClientInterceptor<OperationsRequest, OperationsResponse>]

  /// - Returns: Interceptors to use when invoking 'getSandboxOperationsByCursor'.
  func makeGetSandboxOperationsByCursorInterceptors() -> [ClientInterceptor<GetOperationsByCursorRequest, GetOperationsByCursorResponse>]

  /// - Returns: Interceptors to use when invoking 'getSandboxPortfolio'.
  func makeGetSandboxPortfolioInterceptors() -> [ClientInterceptor<PortfolioRequest, PortfolioResponse>]

  /// - Returns: Interceptors to use when invoking 'sandboxPayIn'.
  func makeSandboxPayInInterceptors() -> [ClientInterceptor<SandboxPayInRequest, SandboxPayInResponse>]

  /// - Returns: Interceptors to use when invoking 'getSandboxWithdrawLimits'.
  func makeGetSandboxWithdrawLimitsInterceptors() -> [ClientInterceptor<WithdrawLimitsRequest, WithdrawLimitsResponse>]
}

public final class SandboxServiceClient: SandboxServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: SandboxServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the tinkoff.public.invest.api.contract.v1.SandboxService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SandboxServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///Сервис для работы с песочницей TINKOFF INVEST API
///
/// To build a server, implement a class that conforms to this protocol.
public protocol SandboxServiceProvider: CallHandlerProvider {
  var interceptors: SandboxServiceServerInterceptorFactoryProtocol? { get }

  ///Метод регистрации счёта в песочнице.
  func openSandboxAccount(request: OpenSandboxAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OpenSandboxAccountResponse>

  ///Метод получения счетов в песочнице.
  func getSandboxAccounts(request: GetAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetAccountsResponse>

  ///Метод закрытия счёта в песочнице.
  func closeSandboxAccount(request: CloseSandboxAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CloseSandboxAccountResponse>

  ///Метод выставления торгового поручения в песочнице.
  func postSandboxOrder(request: PostOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<PostOrderResponse>

  ///Метод изменения выставленной заявки.
  func replaceSandboxOrder(request: ReplaceOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<PostOrderResponse>

  ///Метод получения списка активных заявок по счёту в песочнице.
  func getSandboxOrders(request: GetOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetOrdersResponse>

  ///Метод отмены торгового поручения в песочнице.
  func cancelSandboxOrder(request: CancelOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CancelOrderResponse>

  ///Метод получения статуса заявки в песочнице.
  func getSandboxOrderState(request: GetOrderStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OrderState>

  ///Метод получения позиций по виртуальному счёту песочницы.
  func getSandboxPositions(request: PositionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<PositionsResponse>

  ///Метод получения операций в песочнице по номеру счёта.
  func getSandboxOperations(request: OperationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OperationsResponse>

  ///Метод получения операций в песочнице по номеру счета с пагинацией.
  func getSandboxOperationsByCursor(request: GetOperationsByCursorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetOperationsByCursorResponse>

  ///Метод получения портфолио в песочнице.
  func getSandboxPortfolio(request: PortfolioRequest, context: StatusOnlyCallContext) -> EventLoopFuture<PortfolioResponse>

  ///Метод пополнения счёта в песочнице.
  func sandboxPayIn(request: SandboxPayInRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SandboxPayInResponse>

  ///Метод получения доступного остатка для вывода средств в песочнице.
  func getSandboxWithdrawLimits(request: WithdrawLimitsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<WithdrawLimitsResponse>
}

extension SandboxServiceProvider {
  public var serviceName: Substring { return "tinkoff.public.invest.api.contract.v1.SandboxService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "OpenSandboxAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OpenSandboxAccountRequest>(),
        responseSerializer: ProtobufSerializer<OpenSandboxAccountResponse>(),
        interceptors: self.interceptors?.makeOpenSandboxAccountInterceptors() ?? [],
        userFunction: self.openSandboxAccount(request:context:)
      )

    case "GetSandboxAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetAccountsRequest>(),
        responseSerializer: ProtobufSerializer<GetAccountsResponse>(),
        interceptors: self.interceptors?.makeGetSandboxAccountsInterceptors() ?? [],
        userFunction: self.getSandboxAccounts(request:context:)
      )

    case "CloseSandboxAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CloseSandboxAccountRequest>(),
        responseSerializer: ProtobufSerializer<CloseSandboxAccountResponse>(),
        interceptors: self.interceptors?.makeCloseSandboxAccountInterceptors() ?? [],
        userFunction: self.closeSandboxAccount(request:context:)
      )

    case "PostSandboxOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<PostOrderRequest>(),
        responseSerializer: ProtobufSerializer<PostOrderResponse>(),
        interceptors: self.interceptors?.makePostSandboxOrderInterceptors() ?? [],
        userFunction: self.postSandboxOrder(request:context:)
      )

    case "ReplaceSandboxOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ReplaceOrderRequest>(),
        responseSerializer: ProtobufSerializer<PostOrderResponse>(),
        interceptors: self.interceptors?.makeReplaceSandboxOrderInterceptors() ?? [],
        userFunction: self.replaceSandboxOrder(request:context:)
      )

    case "GetSandboxOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetOrdersRequest>(),
        responseSerializer: ProtobufSerializer<GetOrdersResponse>(),
        interceptors: self.interceptors?.makeGetSandboxOrdersInterceptors() ?? [],
        userFunction: self.getSandboxOrders(request:context:)
      )

    case "CancelSandboxOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CancelOrderRequest>(),
        responseSerializer: ProtobufSerializer<CancelOrderResponse>(),
        interceptors: self.interceptors?.makeCancelSandboxOrderInterceptors() ?? [],
        userFunction: self.cancelSandboxOrder(request:context:)
      )

    case "GetSandboxOrderState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetOrderStateRequest>(),
        responseSerializer: ProtobufSerializer<OrderState>(),
        interceptors: self.interceptors?.makeGetSandboxOrderStateInterceptors() ?? [],
        userFunction: self.getSandboxOrderState(request:context:)
      )

    case "GetSandboxPositions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<PositionsRequest>(),
        responseSerializer: ProtobufSerializer<PositionsResponse>(),
        interceptors: self.interceptors?.makeGetSandboxPositionsInterceptors() ?? [],
        userFunction: self.getSandboxPositions(request:context:)
      )

    case "GetSandboxOperations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OperationsRequest>(),
        responseSerializer: ProtobufSerializer<OperationsResponse>(),
        interceptors: self.interceptors?.makeGetSandboxOperationsInterceptors() ?? [],
        userFunction: self.getSandboxOperations(request:context:)
      )

    case "GetSandboxOperationsByCursor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetOperationsByCursorRequest>(),
        responseSerializer: ProtobufSerializer<GetOperationsByCursorResponse>(),
        interceptors: self.interceptors?.makeGetSandboxOperationsByCursorInterceptors() ?? [],
        userFunction: self.getSandboxOperationsByCursor(request:context:)
      )

    case "GetSandboxPortfolio":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<PortfolioRequest>(),
        responseSerializer: ProtobufSerializer<PortfolioResponse>(),
        interceptors: self.interceptors?.makeGetSandboxPortfolioInterceptors() ?? [],
        userFunction: self.getSandboxPortfolio(request:context:)
      )

    case "SandboxPayIn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SandboxPayInRequest>(),
        responseSerializer: ProtobufSerializer<SandboxPayInResponse>(),
        interceptors: self.interceptors?.makeSandboxPayInInterceptors() ?? [],
        userFunction: self.sandboxPayIn(request:context:)
      )

    case "GetSandboxWithdrawLimits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<WithdrawLimitsRequest>(),
        responseSerializer: ProtobufSerializer<WithdrawLimitsResponse>(),
        interceptors: self.interceptors?.makeGetSandboxWithdrawLimitsInterceptors() ?? [],
        userFunction: self.getSandboxWithdrawLimits(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol SandboxServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'openSandboxAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOpenSandboxAccountInterceptors() -> [ServerInterceptor<OpenSandboxAccountRequest, OpenSandboxAccountResponse>]

  /// - Returns: Interceptors to use when handling 'getSandboxAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSandboxAccountsInterceptors() -> [ServerInterceptor<GetAccountsRequest, GetAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'closeSandboxAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseSandboxAccountInterceptors() -> [ServerInterceptor<CloseSandboxAccountRequest, CloseSandboxAccountResponse>]

  /// - Returns: Interceptors to use when handling 'postSandboxOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePostSandboxOrderInterceptors() -> [ServerInterceptor<PostOrderRequest, PostOrderResponse>]

  /// - Returns: Interceptors to use when handling 'replaceSandboxOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReplaceSandboxOrderInterceptors() -> [ServerInterceptor<ReplaceOrderRequest, PostOrderResponse>]

  /// - Returns: Interceptors to use when handling 'getSandboxOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSandboxOrdersInterceptors() -> [ServerInterceptor<GetOrdersRequest, GetOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'cancelSandboxOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelSandboxOrderInterceptors() -> [ServerInterceptor<CancelOrderRequest, CancelOrderResponse>]

  /// - Returns: Interceptors to use when handling 'getSandboxOrderState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSandboxOrderStateInterceptors() -> [ServerInterceptor<GetOrderStateRequest, OrderState>]

  /// - Returns: Interceptors to use when handling 'getSandboxPositions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSandboxPositionsInterceptors() -> [ServerInterceptor<PositionsRequest, PositionsResponse>]

  /// - Returns: Interceptors to use when handling 'getSandboxOperations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSandboxOperationsInterceptors() -> [ServerInterceptor<OperationsRequest, OperationsResponse>]

  /// - Returns: Interceptors to use when handling 'getSandboxOperationsByCursor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSandboxOperationsByCursorInterceptors() -> [ServerInterceptor<GetOperationsByCursorRequest, GetOperationsByCursorResponse>]

  /// - Returns: Interceptors to use when handling 'getSandboxPortfolio'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSandboxPortfolioInterceptors() -> [ServerInterceptor<PortfolioRequest, PortfolioResponse>]

  /// - Returns: Interceptors to use when handling 'sandboxPayIn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSandboxPayInInterceptors() -> [ServerInterceptor<SandboxPayInRequest, SandboxPayInResponse>]

  /// - Returns: Interceptors to use when handling 'getSandboxWithdrawLimits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSandboxWithdrawLimitsInterceptors() -> [ServerInterceptor<WithdrawLimitsRequest, WithdrawLimitsResponse>]
}
