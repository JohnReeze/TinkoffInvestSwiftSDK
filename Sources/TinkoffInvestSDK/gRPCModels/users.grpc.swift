//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: users.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///Сервис предназначен для получения: </br> **1**.
///списка счетов пользователя; </br> **2**. маржинальных показателей по счёту.
///
/// Usage: instantiate `UsersServiceClient`, then call methods of this protocol to make API calls.
public protocol UsersServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: UsersServiceClientInterceptorFactoryProtocol? { get }

  func getAccounts(
    _ request: GetAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetAccountsRequest, GetAccountsResponse>

  func getMarginAttributes(
    _ request: GetMarginAttributesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetMarginAttributesRequest, GetMarginAttributesResponse>

  func getUserTariff(
    _ request: GetUserTariffRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetUserTariffRequest, GetUserTariffResponse>

  func getInfo(
    _ request: GetInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetInfoRequest, GetInfoResponse>
}

extension UsersServiceClientProtocol {
  public var serviceName: String {
    return "tinkoff.public.invest.api.contract.v1.UsersService"
  }

  ///Метод получения счетов пользователя.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAccounts(
    _ request: GetAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetAccountsRequest, GetAccountsResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.UsersService/GetAccounts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountsInterceptors() ?? []
    )
  }

  ///Расчёт маржинальных показателей по счёту.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarginAttributes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMarginAttributes(
    _ request: GetMarginAttributesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetMarginAttributesRequest, GetMarginAttributesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.UsersService/GetMarginAttributes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarginAttributesInterceptors() ?? []
    )
  }

  ///Запрос тарифа пользователя.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserTariff.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getUserTariff(
    _ request: GetUserTariffRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetUserTariffRequest, GetUserTariffResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.UsersService/GetUserTariff",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserTariffInterceptors() ?? []
    )
  }

  ///Метод получения информации о пользователе.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInfo(
    _ request: GetInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetInfoRequest, GetInfoResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.UsersService/GetInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInfoInterceptors() ?? []
    )
  }
}

public protocol UsersServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getAccounts'.
  func makeGetAccountsInterceptors() -> [ClientInterceptor<GetAccountsRequest, GetAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'getMarginAttributes'.
  func makeGetMarginAttributesInterceptors() -> [ClientInterceptor<GetMarginAttributesRequest, GetMarginAttributesResponse>]

  /// - Returns: Interceptors to use when invoking 'getUserTariff'.
  func makeGetUserTariffInterceptors() -> [ClientInterceptor<GetUserTariffRequest, GetUserTariffResponse>]

  /// - Returns: Interceptors to use when invoking 'getInfo'.
  func makeGetInfoInterceptors() -> [ClientInterceptor<GetInfoRequest, GetInfoResponse>]
}

public final class UsersServiceClient: UsersServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: UsersServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the tinkoff.public.invest.api.contract.v1.UsersService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: UsersServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///Сервис предназначен для получения: </br> **1**.
///списка счетов пользователя; </br> **2**. маржинальных показателей по счёту.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol UsersServiceProvider: CallHandlerProvider {
  var interceptors: UsersServiceServerInterceptorFactoryProtocol? { get }

  ///Метод получения счетов пользователя.
  func getAccounts(request: GetAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetAccountsResponse>

  ///Расчёт маржинальных показателей по счёту.
  func getMarginAttributes(request: GetMarginAttributesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetMarginAttributesResponse>

  ///Запрос тарифа пользователя.
  func getUserTariff(request: GetUserTariffRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetUserTariffResponse>

  ///Метод получения информации о пользователе.
  func getInfo(request: GetInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetInfoResponse>
}

extension UsersServiceProvider {
  public var serviceName: Substring { return "tinkoff.public.invest.api.contract.v1.UsersService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetAccountsRequest>(),
        responseSerializer: ProtobufSerializer<GetAccountsResponse>(),
        interceptors: self.interceptors?.makeGetAccountsInterceptors() ?? [],
        userFunction: self.getAccounts(request:context:)
      )

    case "GetMarginAttributes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetMarginAttributesRequest>(),
        responseSerializer: ProtobufSerializer<GetMarginAttributesResponse>(),
        interceptors: self.interceptors?.makeGetMarginAttributesInterceptors() ?? [],
        userFunction: self.getMarginAttributes(request:context:)
      )

    case "GetUserTariff":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetUserTariffRequest>(),
        responseSerializer: ProtobufSerializer<GetUserTariffResponse>(),
        interceptors: self.interceptors?.makeGetUserTariffInterceptors() ?? [],
        userFunction: self.getUserTariff(request:context:)
      )

    case "GetInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetInfoRequest>(),
        responseSerializer: ProtobufSerializer<GetInfoResponse>(),
        interceptors: self.interceptors?.makeGetInfoInterceptors() ?? [],
        userFunction: self.getInfo(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol UsersServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountsInterceptors() -> [ServerInterceptor<GetAccountsRequest, GetAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'getMarginAttributes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMarginAttributesInterceptors() -> [ServerInterceptor<GetMarginAttributesRequest, GetMarginAttributesResponse>]

  /// - Returns: Interceptors to use when handling 'getUserTariff'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUserTariffInterceptors() -> [ServerInterceptor<GetUserTariffRequest, GetUserTariffResponse>]

  /// - Returns: Interceptors to use when handling 'getInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInfoInterceptors() -> [ServerInterceptor<GetInfoRequest, GetInfoResponse>]
}
